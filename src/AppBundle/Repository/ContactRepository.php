<?php

namespace AppBundle\Repository;


/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use AppBundle\Entity\Contact;
class ContactRepository extends \Doctrine\ORM\EntityRepository
{

    /*
     * requêtes personnalisées
     *      le choix de classe repository équivaut à la commande FROM
     *      doit retourner les résultats de la requête
     *
     * SELECT c.f AS firstname AS f FROM contact AS c
     *
     * createQueryBuilder : méthode pour créer une requête au format DQL (Doctrine Query Language)
     *      choix d'un alias de l'entité en cours
     *
     * getQuery : exécuter la requête : avant-dernière méthode
     * récupérer les résultats : dernière méthode à utiliser
     *      - getResult : array d'entité
     *      - getArrayResult : array de array
     *      - getOneOrNullResult / getSingle : un seul résultat
     *      - getDQL
     * commandes sql :
     *      - select(): utilisationde l'alias / récupération d'un tableau et non plus d'entité
     *      - where(): condition
     *          - première condition doit utiliser where()
     *          - à partir de la deuxième condition : utiliser andWhere() ou orWhere()
     *          - utiliser des paramètres de requête, puis utiliser des setParameters permet d'assigner une valeur aux paramètres
     *          - join(): jointures
     *              - cibler les propriétés relationnelles des entités
     *              - choix d'un alias de l'entité jointe
     */

    public function testQuery()
    {
        $results = $this
            ->createQueryBuilder('c')
            ->select('c.email, c.firstname')
            ->where('c.lastname = :paramLastname')
            ->orWhere('c.email = :paramEmail')
            ->orWhere('c.email LIKE :paramLike')
            ->setParameters([
                'paramLastname' => 'lastname2',
                'paramEmail' => 'email6@gmail.com',
                'paramLike' => '%0%'
            ])
            ->getQuery()
//            ->getDQL() //pour voir la query préparée
            ->getResult()
        ;


        return $results;
    }

    public function testDeuxQuery()
    {
        $results = $this
            ->createQueryBuilder('as_c')
            ->select('as_c.lastname, as_pays.name')
            ->join('as_c.country','as_pays')
            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    public function testTroisQuery()
    {
        $results = $this
            ->createQueryBuilder('contact')
            //JOIN
            ->select('contact.lastname, group_concat(languages.name), country.name')
            ->join('contact.country', 'country')
            ->join('contact.languages', 'languages')
            ->where('country.name LIKE :paramCountryName')
            ->setParameters([
               'paramCountryName' => '%5%'
            ])
            ->groupBy('contact.lastname, country.name')

            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    public function testQuatreQuery()
    {
        $results = $this
            ->createQueryBuilder('contact')
            //GROUP BY
            ->select("contact.lastname, 
            GROUP_CONCAT(languages.name SEPARATOR '|') AS language")
            ->join('contact.languages', 'languages')
            ->groupBy('contact.lastname')

            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    public function testCinqQuery()
    {
        $results = $this
            ->createQueryBuilder('contact')
            //COUNT, dans doctrine, il faut rentrer une colonne pour faire le count
            ->select('contact.email, COUNT(languages.id) AS result')
            ->join('contact.languages','languages')
            ->groupBy('contact.email')
            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    public function testSixQuery()
    {
        return $this
            ->getEntityManager()
            ->getConnection()
            ->query("SELECT * FROM contact")
            ->fetchAll();
        ;
    }

    public function testUpdate()
    {
        /*
 * retour de la requête : nombre de lignes modifiées
 */
        $this->getEntityManager()
            ->createQueryBuilder()
            ->update(Contact::class, 'contact')
            ->set('contact.firstname', ':paramFirstName')
            ->where('contact.id = :paramId')
            ->setParameters([
                'paramFirstName' => 'toto',
                'paramId' => 21
            ])
            ->getQuery()
            ->execute();
    }
}
